View(big.maneuver)
#logistic regression for correlation against big maneuver
df.corr = df %>% left_join(big.maneuver, by = c("id","tack")) %>% select(-c(id, task, RT_steer,RT_adoff, y_first_gaze, y_first_fix)) %>%  select(big_maneuver, everything())
#logistic regression for correlation against big maneuver
df.corr = df %>% left_join(big.maneuver, by = c("id","task")) %>% select(-c(id, task, RT_steer,RT_adoff, y_first_gaze, y_first_fix)) %>%  select(big_maneuver, everything())
View(df.corr)
#logistic regression for correlation against big maneuver
df.corr = df %>% left_join(big.maneuver, by = c("id","task")) %>% select(-c(id, task, RT_steer,RT_adoff, y_first_gaze, y_first_fix)) %>%  select(big_maneuver, everything())
# Load the necessary libraries
library(caret)
install.packages("caret")
#logistic regression for correlation against big maneuver
df.corr = df %>% left_join(big.maneuver, by = c("id","task")) %>% select(-c(id, task, RT_steer,RT_adoff, y_first_gaze, y_first_fix)) %>%  select(big_maneuver, everything())
# Load the necessary libraries
library(caret)
install.packages("vctrs")
library(vctrs)
remove.packages("vctrs")
install.packages("vctrs")
# read all data
library(tidyverse)
eye.df = read_csv(".\\eye_processed\\eye.output.csv")  %>% mutate(id = as.numeric(id))
str(eye.df)
driving.df = read_csv(".\\RT.csv")
str(driving.df)
scl.df = read_csv(".\\scaled_scl.csv")%>% mutate(task = str_remove(task, "\\d"))
str(scl.df)
hrraw.df = read_csv(".\\hr.csv") %>% filter(!grepl('0', task))%>% mutate(task = str_remove(task, "\\d")) %>% filter(task != "B")
pose.df = read_csv(".\\pose_mean.csv")
str(pose.df)
experience.df = read_csv(".\\Demographic.csv") %>% select(id, age, av_experience)
str(experience.df)
big.maneuver = read_csv(".\\all_feature_clasification.csv") %>% select(id, task, big_maneuver)
#clean data
library(janitor)
#clean data frame
hr.df = hrraw.df %>% clean_names(., "snake") %>% select(id, task, mean_hr_beats_min, max_hr_beats_min, mean_rr_ms, rmssd_ms, sd_hr_beats_min, sdnn_ms, rr_tri_index, lf_ms_2, hf_ms_2, lf_hf_ratio, total_power_ms_2)
#select driving
rt.df = driving.df %>% select(id, task, RT_adoff, RT_steer)
#join dataframes
df = hr.df %>% left_join(eye.df, by = c("id", "task")) %>% left_join(scl.df, by = c("id", "task")) %>% left_join(rt.df, by = c("id", "task")) %>% left_join(pose.df, by = c("id", "task")) %>% left_join(experience.df, by = c("id"))
str(df)
RT_adoff.df = df %>% select(-c(id, task, RT_steer, y_first_gaze, y_first_fix)) %>%  select(RT_adoff, everything())
RT_adoff.df_0.25 = RT_adoff.df %>% select(RT_adoff, drv_percentage, pupil_z, pupil_change, switch_count, entropy_log2, drv_scanpath_len, drv_convex_hull, drv_fix_count, drv_fix_dur, drv_grid_transition, drv_entropy_log2, drv_spatial_density, drv_NNI)
RT_steer.df = df %>% select(-c(id, task, y_first_gaze, y_first_fix,RT_adoff)) %>%  select(RT_steer, everything())
#RT_steer.df_0.25 = RT_steer.df %>% select(RT_steer, drv_percentage, ppupil_z,pupil_change,  fix_count, switch_count, grid_transition, entropy_log2)
library(Hmisc)
adoff_matrix = rcorr(as.matrix(RT_adoff.df), type = "spearman")
#adoff_matrix = rcorr(as.matrix(RT_adoff.df_0.25), type = "spearman")
adoff_corr.df = as.data.frame(adoff_matrix$r)%>% select(RT_adoff) %>% tibble::rownames_to_column(var = "metric")
#print(adoff_matrix)
steer_matrix = rcorr(as.matrix(RT_steer.df), type = "spearman")
#print(steer_matrix )
steer_corr.df=as.data.frame(steer_matrix$r) %>% select(1) %>% tibble::rownames_to_column(var = "metric")
first_fix.df = df %>% select(-c(id, task,RT_adoff, RT_steer, y_first_gaze)) %>%  select(y_first_fix, everything())
first_fix_matrix = rcorr(as.matrix(first_fix.df), type = "spearman")
first_fix_corr.df=as.data.frame(first_fix_matrix$r) %>% select(1) %>% tibble::rownames_to_column(var = "metric")
first_gaze.df = df %>% select(-c(id, task,RT_adoff, RT_steer, y_first_fix)) %>%  select(y_first_gaze, everything())
first_gaze_matrix = rcorr(as.matrix(first_gaze.df), type = "spearman")
first_gaze_corr.df=as.data.frame(first_gaze_matrix$r) %>% select(1) %>% tibble::rownames_to_column(var = "metric")
corr.df = adoff_corr.df %>% left_join(steer_corr.df, by = c("metric")) %>% left_join(first_fix_corr.df, by = c("metric")) %>% left_join(first_gaze_corr.df, by = c("metric")) %>% drop_na()
corr.df_0.25 = corr.df %>%   rowwise() %>% mutate(max_value = max(abs(c_across(-1)), na.rm = TRUE)) %>% filter(max_value >=0.25)
#logistic regression for correlation against big maneuver
df.corr = df %>% left_join(big.maneuver, by = c("id","task")) %>% select(-c(id, task, RT_steer,RT_adoff, y_first_gaze, y_first_fix)) %>%  select(big_maneuver, everything())
# Load the necessary libraries
library(caret)
install.packages(c("cli", "digest", "dplyr", "fansi", "lava", "lme4", "MatrixModels", "purrr", "rlang", "rprojroot", "stringi", "tibble", "tidyr", "utf8"))
install.packages(c("cli", "digest", "dplyr", "fansi", "purrr", "rlang", "stringi", "tibble", "tidyr", "utf8"))
library(tibble)
remove.packages("tibble")
install.packages("tibble")
install.packages("tibble")
#logistic regression for correlation against big maneuver
df.corr = df %>% left_join(big.maneuver, by = c("id","task")) %>% select(-c(id, task, RT_steer,RT_adoff, y_first_gaze, y_first_fix)) %>%  select(big_maneuver, everything())
library(tidyverse)
remove.packages("cli")
remove.packages("tidyr")
install.packages("cli")
install.packages("tidyr")
# read all data
library(tidyverse)
eye.df = read_csv(".\\eye_processed\\eye.output.csv")  %>% mutate(id = as.numeric(id))
str(eye.df)
driving.df = read_csv(".\\RT.csv")
str(driving.df)
scl.df = read_csv(".\\scaled_scl.csv")%>% mutate(task = str_remove(task, "\\d"))
str(scl.df)
hrraw.df = read_csv(".\\hr.csv") %>% filter(!grepl('0', task))%>% mutate(task = str_remove(task, "\\d")) %>% filter(task != "B")
pose.df = read_csv(".\\pose_mean.csv")
str(pose.df)
experience.df = read_csv(".\\Demographic.csv") %>% select(id, age, av_experience)
str(experience.df)
big.maneuver = read_csv(".\\all_feature_clasification.csv") %>% select(id, task, big_maneuver)
#clean data
library(janitor)
#clean data frame
hr.df = hrraw.df %>% clean_names(., "snake") %>% select(id, task, mean_hr_beats_min, max_hr_beats_min, mean_rr_ms, rmssd_ms, sd_hr_beats_min, sdnn_ms, rr_tri_index, lf_ms_2, hf_ms_2, lf_hf_ratio, total_power_ms_2)
#select driving
rt.df = driving.df %>% select(id, task, RT_adoff, RT_steer)
#join dataframes
df = hr.df %>% left_join(eye.df, by = c("id", "task")) %>% left_join(scl.df, by = c("id", "task")) %>% left_join(rt.df, by = c("id", "task")) %>% left_join(pose.df, by = c("id", "task")) %>% left_join(experience.df, by = c("id"))
str(df)
RT_adoff.df = df %>% select(-c(id, task, RT_steer, y_first_gaze, y_first_fix)) %>%  select(RT_adoff, everything())
RT_adoff.df_0.25 = RT_adoff.df %>% select(RT_adoff, drv_percentage, pupil_z, pupil_change, switch_count, entropy_log2, drv_scanpath_len, drv_convex_hull, drv_fix_count, drv_fix_dur, drv_grid_transition, drv_entropy_log2, drv_spatial_density, drv_NNI)
RT_steer.df = df %>% select(-c(id, task, y_first_gaze, y_first_fix,RT_adoff)) %>%  select(RT_steer, everything())
#RT_steer.df_0.25 = RT_steer.df %>% select(RT_steer, drv_percentage, ppupil_z,pupil_change,  fix_count, switch_count, grid_transition, entropy_log2)
library(Hmisc)
adoff_matrix = rcorr(as.matrix(RT_adoff.df), type = "spearman")
#adoff_matrix = rcorr(as.matrix(RT_adoff.df_0.25), type = "spearman")
adoff_corr.df = as.data.frame(adoff_matrix$r)%>% select(RT_adoff) %>% tibble::rownames_to_column(var = "metric")
#print(adoff_matrix)
steer_matrix = rcorr(as.matrix(RT_steer.df), type = "spearman")
#print(steer_matrix )
steer_corr.df=as.data.frame(steer_matrix$r) %>% select(1) %>% tibble::rownames_to_column(var = "metric")
first_fix.df = df %>% select(-c(id, task,RT_adoff, RT_steer, y_first_gaze)) %>%  select(y_first_fix, everything())
first_fix_matrix = rcorr(as.matrix(first_fix.df), type = "spearman")
first_fix_corr.df=as.data.frame(first_fix_matrix$r) %>% select(1) %>% tibble::rownames_to_column(var = "metric")
first_gaze.df = df %>% select(-c(id, task,RT_adoff, RT_steer, y_first_fix)) %>%  select(y_first_gaze, everything())
first_gaze_matrix = rcorr(as.matrix(first_gaze.df), type = "spearman")
first_gaze_corr.df=as.data.frame(first_gaze_matrix$r) %>% select(1) %>% tibble::rownames_to_column(var = "metric")
corr.df = adoff_corr.df %>% left_join(steer_corr.df, by = c("metric")) %>% left_join(first_fix_corr.df, by = c("metric")) %>% left_join(first_gaze_corr.df, by = c("metric")) %>% drop_na()
corr.df_0.25 = corr.df %>%   rowwise() %>% mutate(max_value = max(abs(c_across(-1)), na.rm = TRUE)) %>% filter(max_value >=0.25)
#cosolidated dataset
write.csv(df,file = "all_feature_nosubjective.csv", row.names = FALSE)
#logistic regression for correlation against big maneuver
df.corr = df %>% left_join(big.maneuver, by = c("id","task")) %>% select(-c(id, task, RT_steer,RT_adoff, y_first_gaze, y_first_fix)) %>%  select(big_maneuver, everything())
# Load the necessary libraries
library(caret)
library(MASS)
# Fit a full logistic regression model with all predictors
fullModel <- glm(big_maneuver ~ ., data = df.corr, family = binomial)
# Summary of the full model to check initial coefficients
summary(fullModel)
# Stepwise feature selection using both directions (forward and backward)
stepModel <- stepAIC(fullModel, direction = "both", trace = FALSE)
# Summary of the stepwise model to check selected features and their coefficients
summary(stepModel)
#logistic regression for correlation against big maneuver
df.corr = df  %>% select(-c(id, task, RT_steer,y_first_gaze, y_first_fix)) %>%  select(RT_adoff, everything())
View(df)
#logistic regression for correlation against big maneuver
df.corr = df%>% select(-c(id, task, RT_steer,y_first_gaze, y_first_fix)) %>%  select(RT_adoff, everything())
#logistic regression for correlation against big maneuver
df.corr = df%>% dplyr::select(-c(id, task, RT_steer,y_first_gaze, y_first_fix)) %>%  select(RT_adoff, everything())
#logistic regression for correlation against big maneuver
df.corr = df%>% dplyr::select(-c(id, task, RT_steer,y_first_gaze, y_first_fix)) #%>% select(RT_adoff, everything())
# Load the necessary libraries
library(caret)
library(MASS)
# Fit a full logistic regression model with all predictors
fullModel <- lm(big_maneuver ~ ., data = df.corr)
View(df.corr)
#logistic regression for correlation against big maneuver
df.corr = df%>% dplyr::select(-c(id, task, RT_steer,y_first_gaze, y_first_fix))
# Load the necessary libraries
library(caret)
library(MASS)
# Fit a full logistic regression model with all predictors
fullModel <- lm(RT_adoff ~ ., data = df.corr)
# Summary of the full model to check initial coefficients
summary(fullModel)
# Stepwise feature selection using both directions (forward and backward)
stepModel <- stepAIC(fullModel, direction = "both", trace = FALSE)
#logistic regression for correlation against big maneuver
df.corr = df%>% dplyr::select(-c(id, task, RT_steer,y_first_gaze, y_first_fix))
# Load the necessary libraries
library(MASS)
# Fit a full logistic regression model with all predictors
fullModel <- lm(RT_adoff ~ ., data = df.corr)
# Summary of the full model to check initial coefficients
summary(fullModel)
# Stepwise feature selection using both directions (forward and backward)
stepModel <- stepAIC(fullModel, direction = "both", trace = FALSE)
#logistic regression for correlation against big maneuver
df.corr = df%>% dplyr::select(-c(id, task, RT_steer,y_first_gaze, y_first_fix))
sum(is.na(df.corr))
# Load the necessary libraries
library(MASS)
# Fit a full logistic regression model with all predictors
fullModel <- lm(RT_adoff ~ ., data = df.corr)
# Summary of the full model to check initial coefficients
summary(fullModel)
# Stepwise feature selection using both directions (forward and backward)
stepModel <- stepAIC(fullModel, direction = "both", trace = FALSE)
View(df.corr)
#logistic regression for correlation against big maneuver
df.corr = df%>% dplyr::select(-c(id, task, RT_steer,y_first_gaze, y_first_fix))
df.corr <- na.omit(df.corr)
#sum(is.na(df.corr))
# Load the necessary libraries
library(MASS)
# Fit a full logistic regression model with all predictors
fullModel <- lm(RT_adoff ~ ., data = df.corr)
# Summary of the full model to check initial coefficients
summary(fullModel)
# Stepwise feature selection using both directions (forward and backward)
stepModel <- stepAIC(fullModel, direction = "both", trace = FALSE)
# Summary of the stepwise model to check selected features and their coefficients
summary(stepModel)
#logistic regression for correlation against big maneuver
df.corr = df%>% dplyr::select(-c(id, task, RT_adoff,y_first_gaze, y_first_fix))
df.corr <- na.omit(df.corr)
#sum(is.na(df.corr))
# Load the necessary libraries
library(MASS)
# Fit a full logistic regression model with all predictors
fullModel <- lm(RT_steer ~ ., data = df.corr)
# Summary of the full model to check initial coefficients
summary(fullModel)
# Stepwise feature selection using both directions (forward and backward)
stepModel <- stepAIC(fullModel, direction = "both", trace = FALSE)
# Summary of the stepwise model to check selected features and their coefficients
summary(stepModel)
#logistic regression for correlation against big maneuver
df.corr = df%>% dplyr::select(-c(id, task, RT_steer,RT_adoff, y_first_gaze))
df.corr <- na.omit(df.corr)
#sum(is.na(df.corr))
# Load the necessary libraries
library(MASS)
# Fit a full logistic regression model with all predictors
fullModel <- lm(y_first_fix ~ ., data = df.corr)
# Summary of the full model to check initial coefficients
summary(fullModel)
# Stepwise feature selection using both directions (forward and backward)
stepModel <- stepAIC(fullModel, direction = "both", trace = FALSE)
# Summary of the stepwise model to check selected features and their coefficients
summary(stepModel)
#logistic regression for correlation against big maneuver
df.corr = df%>% dplyr::select(-c(id, task, RT_steer,RT_adoff, y_first_fix))
df.corr <- na.omit(df.corr)
#sum(is.na(df.corr))
# Load the necessary libraries
library(MASS)
# Fit a full logistic regression model with all predictors
fullModel <- lm(y_first_gaze ~ ., data = df.corr)
# Summary of the full model to check initial coefficients
summary(fullModel)
# Stepwise feature selection using both directions (forward and backward)
stepModel <- stepAIC(fullModel, direction = "both", trace = FALSE)
# Summary of the stepwise model to check selected features and their coefficients
summary(stepModel)
#plot
distance = df_filter %>% select(id, task, frame, right_wrist_x_filt, right_wrist_y_filt, right_eye_x_filt, right_eye_y_filt) %>%
group_by(id, task) %>%
mutate(max_frame = max(frame)) %>%
ungroup() %>%
left_join(df_filter %>% select(id, task, frame, right_wrist_x_filt, right_wrist_y_filt, right_eye_x_filt, right_eye_y_filt), by = c("id", "task", "max_frame" = "frame")) %>%
mutate(hand_dist = sqrt((right_wrist_x_filt.x - right_wrist_x_filt.y)^2 + (right_wrist_y_filt.x - right_wrist_y_filt.y)^2),
eye_dist = sqrt((right_eye_x_filt.x - right_eye_x_filt.y)^2 + (right_eye_y_filt.x - right_eye_y_filt.y)^2)) %>%
select(id, task, frame, hand_dist, eye_dist)
library(tidyverse)
library(readr)
# directory with CSV files
root_dir <- "D:\\Cloud Drives\\OneDrive - purdue.edu\\Documents\\Rprojects\\year3_data\\pose_coordinate"
# list all CSV files
all_csv_files <- list.files(path = root_dir, pattern = "\\.csv$", full.names = TRUE, recursive = TRUE)
# read all CSV files into a list of dataframes
list_df <- lapply(all_csv_files, function(x) {
df <- read_csv(x)
df$filename <- basename(x)   # file name
# df$B <- dirname(x)    # directory name
df
})
# bind all dataframes into one
df <- bind_rows(list_df)
library(janitor)
library(zoo)
# Define a function to remove brackets
remove_brackets <- function(x) gsub("\\[|\\]", "", x)
df.label <- df %>% clean_names(., "snake") %>%
mutate(
id = str_extract(filename, "(?<=_)[0-9]{1,2}"),
task = str_extract(filename, "(?<=_)[0-9]{1,2}(.)")
) %>%
mutate(
task = str_sub(task, nchar(id) + 1, nchar(id) + 1)
) %>% select(-c(filename)) %>%  select(id, task, frame, right_eye, right_ear, right_wrist) %>%
mutate(across(c("right_eye", "right_ear", "right_wrist"), remove_brackets)) %>%
# Separate each coordinate column into two separate columns
separate(right_eye, into = c("right_eye_x", "right_eye_y"), sep = ", ", convert = TRUE) %>%
separate(right_ear, into = c("right_ear_x", "right_ear_y"), sep = ", ", convert = TRUE) %>%
separate(right_wrist, into = c("right_wrist_x", "right_wrist_y"), sep = ", ", convert = TRUE)
library(janitor)
library(zoo)
# Define a function to remove brackets
remove_brackets <- function(x) gsub("\\[|\\]", "", x)
df.label <- df %>% clean_names(., "snake") %>%
mutate(
id = str_extract(filename, "(?<=_)[0-9]{1,2}"),
task = str_extract(filename, "(?<=_)[0-9]{1,2}(.)")
) %>%
mutate(
task = str_sub(task, nchar(id) + 1, nchar(id) + 1)
) %>% dplyr::select(-c(filename)) %>%  select(id, task, frame, right_eye, right_ear, right_wrist) %>%
mutate(across(c("right_eye", "right_ear", "right_wrist"), remove_brackets)) %>%
# Separate each coordinate column into two separate columns
separate(right_eye, into = c("right_eye_x", "right_eye_y"), sep = ", ", convert = TRUE) %>%
separate(right_ear, into = c("right_ear_x", "right_ear_y"), sep = ", ", convert = TRUE) %>%
separate(right_wrist, into = c("right_wrist_x", "right_wrist_y"), sep = ", ", convert = TRUE)
library(janitor)
library(zoo)
# Define a function to remove brackets
remove_brackets <- function(x) gsub("\\[|\\]", "", x)
df.label <- df %>% clean_names(., "snake") %>%
mutate(
id = str_extract(filename, "(?<=_)[0-9]{1,2}"),
task = str_extract(filename, "(?<=_)[0-9]{1,2}(.)")
) %>%
mutate(
task = str_sub(task, nchar(id) + 1, nchar(id) + 1)
) %>% dplyr::select(-c(filename)) %>% dplyr::select(id, task, frame, right_eye, right_ear, right_wrist) %>%
mutate(across(c("right_eye", "right_ear", "right_wrist"), remove_brackets)) %>%
# Separate each coordinate column into two separate columns
separate(right_eye, into = c("right_eye_x", "right_eye_y"), sep = ", ", convert = TRUE) %>%
separate(right_ear, into = c("right_ear_x", "right_ear_y"), sep = ", ", convert = TRUE) %>%
separate(right_wrist, into = c("right_wrist_x", "right_wrist_y"), sep = ", ", convert = TRUE)
# Define a function to handle the interpolation, including edge cases with NAs at the beginning or end
interpolate_na <- function(x) {
if (all(is.na(x))) {
return(x)  # return as is if all values are NA
}
na.approx(x, rule = 2)
}
library(signal)
str(df.label)
# Apply the function to each column within each group
df_interp <- df.label %>%
group_by(id, task) %>%
mutate(across(2:7, interpolate_na)) %>%
ungroup()
#apply  Savitzky-Golay filter to smooth out data
df_filter <- df_interp %>%
mutate(
right_wrist_x_filt = sgolayfilt(right_wrist_x, p = 3, n = 31), # p is the polynomial order3, window length 3 seconds (90 frames),
right_wrist_y_filt = sgolayfilt(right_wrist_y, p = 3, n = 31),
right_eye_x_filt = sgolayfilt(right_eye_x, p = 3, n = 31),
right_eye_y_filt = sgolayfilt(right_eye_y, p = 3, n = 31),
)
df_filter_2 <- df_interp %>%
mutate(
right_wrist_x_filt = sgolayfilt(right_wrist_x, p = 3, n = 31), # p is the polynomial order3, window length 3 seconds (90 frames),
right_wrist_y_filt = sgolayfilt(right_wrist_y, p = 3, n = 31),
right_eye_x_filt = sgolayfilt(right_eye_x, p = 3, n = 31),
right_eye_y_filt = sgolayfilt(right_eye_y, p = 3, n = 31),
)
#visualise filtering result
str(df_filter)
df_filtered = df_filter %>% dplyr::filter(task == "D") %>% dplyr::filter(id == 10)
ggplot(df_filtered, aes(x = frame)) +
geom_line(aes(y =  right_wrist_x), color = 'blue', alpha = 0.5) +
geom_line(aes(y =  right_wrist_x_filt), color = 'red') +
theme_minimal() +
labs(title = "Savitzky-Golay Filter", x = "frame", y = " right_wrist_x")
#plot
distance = df_filter %>% select(id, task, frame, right_wrist_x_filt, right_wrist_y_filt, right_eye_x_filt, right_eye_y_filt) %>%
group_by(id, task) %>%
mutate(max_frame = max(frame)) %>%
ungroup() %>%
left_join(df_filter %>% select(id, task, frame, right_wrist_x_filt, right_wrist_y_filt, right_eye_x_filt, right_eye_y_filt), by = c("id", "task", "max_frame" = "frame")) %>%
mutate(hand_dist = sqrt((right_wrist_x_filt.x - right_wrist_x_filt.y)^2 + (right_wrist_y_filt.x - right_wrist_y_filt.y)^2),
eye_dist = sqrt((right_eye_x_filt.x - right_eye_x_filt.y)^2 + (right_eye_y_filt.x - right_eye_y_filt.y)^2)) %>%
select(id, task, frame, hand_dist, eye_dist)
#plot
distance = df_filter %>% select(id, task, frame, right_wrist_x_filt, right_wrist_y_filt, right_eye_x_filt, right_eye_y_filt) %>%
group_by(id, task) %>%
mutate(max_frame = max(frame)) %>%
ungroup() %>%
left_join(df_filter %>% dplyr::select(id, task, frame, right_wrist_x_filt, right_wrist_y_filt, right_eye_x_filt, right_eye_y_filt), by = c("id", "task", "max_frame" = "frame")) %>%
mutate(hand_dist = sqrt((right_wrist_x_filt.x - right_wrist_x_filt.y)^2 + (right_wrist_y_filt.x - right_wrist_y_filt.y)^2),
eye_dist = sqrt((right_eye_x_filt.x - right_eye_x_filt.y)^2 + (right_eye_y_filt.x - right_eye_y_filt.y)^2)) %>%
dplyr::select(id, task, frame, hand_dist, eye_dist)
#plot
distance = df_filter %>% dplyr::select(id, task, frame, right_wrist_x_filt, right_wrist_y_filt, right_eye_x_filt, right_eye_y_filt) %>%
group_by(id, task) %>%
mutate(max_frame = max(frame)) %>%
ungroup() %>%
left_join(df_filter %>% dplyr::select(id, task, frame, right_wrist_x_filt, right_wrist_y_filt, right_eye_x_filt, right_eye_y_filt), by = c("id", "task", "max_frame" = "frame")) %>%
mutate(hand_dist = sqrt((right_wrist_x_filt.x - right_wrist_x_filt.y)^2 + (right_wrist_y_filt.x - right_wrist_y_filt.y)^2),
eye_dist = sqrt((right_eye_x_filt.x - right_eye_x_filt.y)^2 + (right_eye_y_filt.x - right_eye_y_filt.y)^2)) %>%
dplyr::select(id, task, frame, hand_dist, eye_dist)
#longe smoothing window
distance_2 = df_filter_2 %>% dplyr::select(id, task, frame, right_wrist_x_filt, right_wrist_y_filt, right_eye_x_filt, right_eye_y_filt) %>%
group_by(id, task) %>%
mutate(max_frame = max(frame)) %>%
ungroup() %>%
left_join(df_filter %>% select(id, task, frame, right_wrist_x_filt, right_wrist_y_filt, right_eye_x_filt, right_eye_y_filt), by = c("id", "task", "max_frame" = "frame")) %>%
mutate(hand_dist = sqrt((right_wrist_x_filt.x - right_wrist_x_filt.y)^2 + (right_wrist_y_filt.x - right_wrist_y_filt.y)^2),
eye_dist = sqrt((right_eye_x_filt.x - right_eye_x_filt.y)^2 + (right_eye_y_filt.x - right_eye_y_filt.y)^2)) %>%
dplyr::select(id, task, frame, hand_dist, eye_dist)
#plot
distance = df_filter %>% dplyr::select(id, task, frame, right_wrist_x_filt, right_wrist_y_filt, right_eye_x_filt, right_eye_y_filt) %>%
group_by(id, task) %>%
mutate(max_frame = max(frame)) %>%
ungroup() %>%
left_join(df_filter %>% dplyr::select(id, task, frame, right_wrist_x_filt, right_wrist_y_filt, right_eye_x_filt, right_eye_y_filt), by = c("id", "task", "max_frame" = "frame")) %>%
mutate(hand_dist = sqrt((right_wrist_x_filt.x - right_wrist_x_filt.y)^2 + (right_wrist_y_filt.x - right_wrist_y_filt.y)^2),
eye_dist = sqrt((right_eye_x_filt.x - right_eye_x_filt.y)^2 + (right_eye_y_filt.x - right_eye_y_filt.y)^2)) %>%
dplyr::select(id, task, frame, hand_dist, eye_dist)
#longe smoothing window
distance_2 = df_filter_2 %>% dplyr::select(id, task, frame, right_wrist_x_filt, right_wrist_y_filt, right_eye_x_filt, right_eye_y_filt) %>%
group_by(id, task) %>%
mutate(max_frame = max(frame)) %>%
ungroup() %>%
left_join(df_filter %>% dplyr::select(id, task, frame, right_wrist_x_filt, right_wrist_y_filt, right_eye_x_filt, right_eye_y_filt), by = c("id", "task", "max_frame" = "frame")) %>%
mutate(hand_dist = sqrt((right_wrist_x_filt.x - right_wrist_x_filt.y)^2 + (right_wrist_y_filt.x - right_wrist_y_filt.y)^2),
eye_dist = sqrt((right_eye_x_filt.x - right_eye_x_filt.y)^2 + (right_eye_y_filt.x - right_eye_y_filt.y)^2)) %>%
dplyr::select(id, task, frame, hand_dist, eye_dist)
distance.A = distance %>%
#only contain it in observation A
dplyr::filter(frame <= 900)
distance.B = distance_2 %>% dplyr::filter(frame > 900 & frame <=1100)
#five seperate plots
library(ggplot2)
library(plotly)
#library(gapminder)
# Creating individual plots
test<-  ggplot(distance%>% dplyr::filter(task == "M"), aes(x = frame, y = hand_dist, color = as.factor(id))) +
geom_line() +
labs(title = "Task D") +
theme_minimal()
ggplotly(test)
#hand distance
# Consolidating lines and computing confidence interval
consolidated_data <- distance.A %>%
group_by(task, frame) %>%
summarise(mean_hand_dist = mean(hand_dist),
lower_ci = mean(hand_dist) - sd(hand_dist)/sqrt(n()),
upper_ci = mean(hand_dist) + sd(hand_dist)/sqrt(n()))
# Plotting consolidated lines with confidence intervals
consolidated_plot <- ggplot(consolidated_data, aes(x = frame, y = mean_hand_dist, color = task, fill = task)) +
geom_line() +
geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), alpha = 0.3) +
labs(title = "Hand Distance to Steeringwheel by Task", color = "Task") +
theme_minimal()
# Displaying the consolidated plot
ggplotly(consolidated_plot)
#hand distance
# Consolidating lines and computing confidence interval
consolidated_data <- distance.B %>%
group_by(task, frame) %>%
summarise(mean_hand_dist = mean(hand_dist),
lower_ci = mean(hand_dist) - sd(hand_dist)/sqrt(n()),
upper_ci = mean(hand_dist) + sd(hand_dist)/sqrt(n()))
# Plotting consolidated lines with confidence intervals
consolidated_plot_B <- ggplot(consolidated_data, aes(x = frame, y = mean_hand_dist, color = task, fill = task)) +
geom_line() +
geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), alpha = 0.3) +
labs(title = "Hand Distance to Steeringwheel by Task", color = "Task") +
theme_minimal()
# Displaying the consolidated plot
ggplotly(consolidated_plot_B)
#eye_distance
# Consolidating lines and computing confidence interval
consolidated_data <- distance.A %>%
group_by(task, frame) %>%
summarise(mean_eye_dist = mean(eye_dist),
lower_ci = mean(eye_dist) - sd(eye_dist)/sqrt(n()),
upper_ci = mean(eye_dist) + sd(eye_dist)/sqrt(n()))
# Plotting consolidated lines with confidence intervals
consolidated_plot <- ggplot(consolidated_data, aes(x = frame, y = mean_eye_dist, color = task, fill = task)) +
geom_line() +
geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), alpha = 0.3) +
labs(title = "Right Eye Distance with Confidence Intervals by Task", color = "Task") +
theme_minimal()
# Displaying the consolidated plot
ggplotly(consolidated_plot)
#eye_distance
# Consolidating lines and computing confidence interval
consolidated_data <- distance.A %>%
group_by(task, frame) %>%
summarise(mean_eye_dist = mean(eye_dist),
lower_ci = mean(eye_dist) - sd(eye_dist)/sqrt(n()),
upper_ci = mean(eye_dist) + sd(eye_dist)/sqrt(n()))
# Plotting consolidated lines with confidence intervals
consolidated_plot <- ggplot(consolidated_data, aes(x = frame, y = mean_eye_dist, color = task, fill = task)) +
geom_line() +
geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), alpha = 0.3) +
labs(title = "Right Eye Distance with Confidence Intervals by Task", color = "Task") +
theme_minimal()
# Displaying the consolidated plot
ggplotly(consolidated_plot)
# Consolidating lines and computing confidence interval
consolidated_data <- distance.B %>%
group_by(task, frame) %>%
summarise(mean_eye_dist = mean(eye_dist),
lower_ci = mean(eye_dist) - sd(eye_dist)/sqrt(n()),
upper_ci = mean(eye_dist) + sd(eye_dist)/sqrt(n()))
# Plotting consolidated lines with confidence intervals
consolidated_plot_2 <- ggplot(consolidated_data, aes(x = frame, y = mean_eye_dist, color = task, fill = task)) +
geom_line() +
geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), alpha = 0.3) +
labs(title = "Right Eye Distance with Confidence Intervals by Task", color = "Task") +
theme_minimal()
# Displaying the consolidated plot
ggplotly(consolidated_plot_2)
library(htmltools)
remove.packages("htmltools", lib="~/R/win-library/4.0")
library(tidyverse)
df.raw = read_csv(".\\all_feature_nosubjective.csv")
str(df.raw)
View(df.raw)
install.packages("Boruta")
install.packages("htmltools")
library(Boruta)
library(rlang)
library(Boruta)
data = df.raw %>% select(-c(id, task, RT_steer, y_first_gaze, y_first_fix))
remove.packages("rlang", lib="~/R/win-library/4.0")
install.packages("rlang")
R. Version()
updateR()
version
